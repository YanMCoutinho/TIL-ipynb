# %% [markdown]
# # Atividade: Gerando Dados Sint√©ticos Realistas
# 
# ## Objetivo
# Gerar um dataset sint√©tico simulando logs de acesso a um e-commerce, definindo vari√°veis, distribui√ß√µes e avaliando a qualidade dos dados.

# %% [markdown]
# ### Passo 1: Defini√ß√£o das Vari√°veis e Dicion√°rio de Dados (2 pontos)
# 
# Crie um dicion√°rio para as vari√°veis do seu DataFrame. O DataFrame deve incluir vari√°veis cont√≠nuas, categ√≥ricas e com valores nulos.  
# O dicion√°rio de dados deve incluir 'nome da vari√°vel', 'tipo' e 'descri√ß√£o'.
# 
# | Vari√°vel          | Tipo      | Descri√ß√£o                              | Distribui√ß√£o Sugerida          |
# |-------------------|-----------|----------------------------------------|--------------------------------|
# | session_id        | String    | ID √∫nico da sess√£o                     | UUID ou sequ√™ncia num√©rica     |
# | user_id           | Integer   | ID do usu√°rio                          | Sequ√™ncia num√©rica - 10% n√£o logados (Null)   |
# | timestamp         | Datetime  | Timestamp do evento                    | Distribui√ß√£o temporal di√°ria (Poisson)  |
# | page_url          | String    | URL da p√°gina acessada                 | Padr√£o `/produto/{id}`         |
# | session_duration  | Float     | Dura√ß√£o da sess√£o em segundos          | Exponencial                    |
# | add_to_cart       | Boolean   | Indicador de adicionar ao carrinho     | Bernoulli(p=0.2)               |
# | purchase          | Boolean   | Indicador de compra                    | Bernoulli(p=0.05)              |

# %% [markdown]
# ### Passo 2: Gera√ß√£o do Dataset em Python B√°sico (3 pontos)
# 
# Gere o dataset utilizando apenas bibliotecas como `numpy`, `pandas` e `datetime` (sem bibliotecas como `Faker`).
# 
# **Desafios extras**:  
# - Adicionar depend√™ncias entre vari√°veis (ex: `session_duration` maior para `add_to_cart`).  
# - Gerar URLs realistas (ex: `/produto/{id}` com `id` sequencial).  
# - Considerar per√≠odos de alta sazonalidade como natal, dia das m√£es e Black Friday.

# %% [markdown]
# #### 2.1 Instala√ß√£o das depend√™ncias

# %%
import subprocess
import sys

# Build the command: [python, -m, pip, install, packages...]
cmd = [
    sys.executable,  # ensures you use the current Python interpreter
    "-m", "pip",
    "install",
    "numpy",
    "pandas",
    "matplotlib"
]

# Run it, raise an exception if it fails
result = subprocess.run(
    cmd,
    capture_output=True,  # so you can inspect stdout/stderr
    text=True,            # decode output to str
    check=True            # will raise CalledProcessError on non-zero exit
)

print("üü¢ Installed successfully!")
print(result.stdout)


# %% [markdown]
# #### 2.2 Importando bibliotecas

# %%
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

# %% [markdown]
# #### 2.3 Definindo o per√≠odo e gerando datas com sazonalidade

# %% [markdown]
# O per√≠odo contemplado ser√° de todos os dias do ano de 2024

# %%
start_date = datetime(2024, 1, 1)
end_date = datetime(2024, 12, 31)
days = pd.date_range(start_date, end_date, freq='D')

# %% [markdown]
# #### 2.4 Gerando timestamps de sess√µes di√°rias com varia√ß√£o sazonal

# %% [markdown]
# Aqui ser√° gerado os num√©ros de sess√µes por dia com varia√ß√£o no Natal e na black friday, a fim de gerar os ru√≠dos similares aos encontrados em datasets reais. No natal haver√° 30% mais visitas, j√° na black friday as visitas dobrar√£o
# 

# %%
sessions = []
base_sessions = 300

for day in days:
    n = np.random.poisson(base_sessions)
    # Natal
    if day.month == 12 and 20 <= day.day <= 24:
        n = int(n * 1.3)

    # Black Friday
    if day.month == 11 and day.weekday() == 4 and day.day >= 23:
        n = int(n * 2)
    for _ in range(n):
        random_time = day + timedelta(
            hours=np.random.randint(0, 24),
            minutes=np.random.randint(0, 60),
            seconds=np.random.randint(0, 60)
        )
        sessions.append(random_time)

timestamps = sessions

# %% [markdown]
# #### 2.5 Construindo DataFrame inicial com timestamp e IDs

# %% [markdown]
# Inicia as outras colunas do dataframe, como session_id, user_id, product_id e page_url

# %%
df = pd.DataFrame({'timestamp': timestamps})
df['session_id'] = ['sess_' + str(i) for i in range(len(df))]
df['user_id'] = np.random.randint(1, 10000, size=len(df))
df['product_id'] = np.random.randint(1, 1000, size=len(df))
df['page_url'] = df['product_id'].apply(lambda x: f"/produto/{x}")

# %% [markdown]
# #### 2.6 Adicionando vari√°veis de comportamento

# %% [markdown]
# Adiciona a coluna `add_to_cart` com 20% de probabilidade de ser verdadeira

# %%
# add_to_cart com probabilidade 0.2
df['add_to_cart'] = np.random.rand(len(df)) < 0.2

# %% [markdown]
# ##### Ajustando session_duration conforme `add_to_cart`

# %% [markdown]
# Gera o tempo de sess√£o e aumenta em 50% o tempo de sess√£o em que `add_to_cart` √© `true`

# %%
# Dura√ß√£o exponencial
df['session_duration'] = np.random.exponential(scale=300, size=len(df))
# Aumenta dura√ß√£o em sess√µes com add_to_cart
df.loc[df['add_to_cart'], 'session_duration'] *= 1.5

# %% [markdown]
# ##### Definindo `purchase` dependente de `add_to_cart`

# %% [markdown]
# Adiciona a coluna `purchase`. Ela tem 20% de chance de ser verdadeira se a coluna `add_to_cart` √© verdadeira

# %%
purchase_prob = np.where(df['add_to_cart'], 0.2, 0.0)
df['purchase'] = np.random.rand(len(df)) < purchase_prob

# %% [markdown]
# ##### Inserindo valores nulos

# %% [markdown]
# Insere valor nulo em `user_id` para representar usu√°rios n√£o logados. A probabilidade do usu√°rio ser nulo √© de 10%

# %%
mask = np.random.rand(len(df)) < 0.1
df.loc[mask, 'user_id'] = pd.NA
df.isnull().sum()

# %% [markdown]
# ##### Vers√£o final do Dataset

# %%
df.head()

# %% [markdown]
# Tamanho do DF

# %%
len(df)

# %% [markdown]
# ### Passo 3: Avalia√ß√£o da Qualidade dos Dados (3 pontos)
# 
# **Dica**  
# - Capriche na visualiza√ß√£o dos dados (i.e., use os gr√°ficos certos para demonstrar o seu ponto)

# %% [markdown]
# #### 3.1 Estat√≠sticas e valores ausentes

# %%
# Percentual de valores ausentes
missing = df.isnull().mean() * 100
print(missing)

# Estat√≠sticas descritivas
df.describe()

# %% [markdown]
# #### 3.2 Visualiza√ß√µes

# %% [markdown]
# ##### Histograma da dura√ß√£o da sess√£o

# %%
# Histograma de dura√ß√£o de sess√£o
plt.figure(figsize=(8,4))
plt.hist(df['session_duration'], bins=50)
plt.title('Histograma de Dura√ß√£o de Sess√£o')
plt.xlabel('Dura√ß√£o (segundos)')
plt.ylabel('Frequ√™ncia')
plt.show()

# %% [markdown]
# A dura√ß√£o da sess√£o √© representada por uma distribui√ß√£o poisson

# %% [markdown]
# ##### Rela√ß√£o entre a quantidade de `add_to_cart` vs `purchase`

# %%
# Calculando os totais
totals = df[['add_to_cart', 'purchase']].sum()

# Criando o gr√°fico
plt.figure(figsize=(8,5))
totals.plot(kind='bar', color=['skyblue', 'lightgreen'])
plt.title('Total de A√ß√µes: Adicionar ao Carrinho vs Compra')
plt.ylabel('Quantidade')
plt.xticks(rotation=0)
plt.show()

# %% [markdown]
# Dado que `purchase` s√≥ ocorre se `add_to_cart` for verdadeiro, faz sentido a correla√ß√£o demonstrada

# %% [markdown]
# ##### Quantidade de sess√µes por dia

# %%
daily_counts = df.set_index('timestamp').resample('D').size()
plt.figure(figsize=(10,4))
plt.plot(daily_counts.index, daily_counts.values)
plt.title('N√∫mero de Sess√µes por Dia')
plt.xlabel('Data')
plt.ylabel('Sess√µes')
plt.show()

# %% [markdown]
# A partir disso, √© poss√≠vel ver o aumento realizado entre o n√∫mero de sess√µes na black friday e no natal

# %% [markdown]
# #### 3.3 Boxplot da dura√ß√£o de sess√£o por add_to_cart
# Este gr√°fico compara a distribui√ß√£o do tempo de sess√£o entre sess√µes que resultaram em adi√ß√£o ao carrinho e as que n√£o resultaram, permitindo visualizar a dispers√£o e poss√≠veis outliers.

# %%
# Boxplot de duration por add_to_cart
plt.figure(figsize=(8,4))
df.boxplot(column='session_duration', by='add_to_cart')
plt.title('Dura√ß√£o de Sess√£o vs Add to Cart')
plt.suptitle('')
plt.xlabel('Adicionou ao Carrinho')
plt.ylabel('Dura√ß√£o (segundos)')
plt.show()

# %% [markdown]
# A partir desse gr√°fico, fica vis√≠vel a quantidade de outliers n√£o esperados. Dado que a dura√ß√£o da sess√£o n√£o foi criada a partir de uma distribui√ß√£o normal, h√° uma grande quantidade de outliers. Entretanto, √© poss√≠vel observar o aumento provocado do tempo de sess√£o quando h√° a adi√ß√£o do produto no carrinho.

# %% [markdown]
# #### 3.4 Taxa de convers√£o mensal
# Calcula e plota a propor√ß√£o de sess√µes que resultaram em compra por m√™s, sinalizando tend√™ncias sazonais na convers√£o.

# %%
# Taxa de convers√£o mensal (purchase rate)
monthly_rate = df.set_index('timestamp').resample('ME').purchase.mean()
plt.figure(figsize=(10,4))
plt.plot(monthly_rate.index, monthly_rate.values, marker='o')
plt.title('Taxa de Convers√£o Mensal')
plt.xlabel('M√™s')
plt.ylabel('Propor√ß√£o de Compras')
plt.show()

# %% [markdown]
# Com essa visualiza√ß√£o √© poss√≠vel observar que a falta da rela√ß√£o entre compras nos per√≠odos da black friday e do natal gerou uma inconsist√™ncia entre a rela√ß√£o do num√©ro de sess√µes e de compras.

# %% [markdown]
# #### 3.5 Top 10 produtos mais visitados
# Identifica os 10 produtos com maior n√∫mero de acessos, auxiliando na an√°lise de popularidade de itens.

# %%
# Top 10 produtos por n√∫mero de acessos
top10 = df['product_id'].value_counts().nlargest(10)
plt.figure(figsize=(8,4))
plt.bar(top10.index.astype(str), top10.values)
plt.title('Top 10 Produtos por Acessos')
plt.xlabel('ID do Produto')
plt.ylabel('N√∫mero de Acessos')
plt.xticks(rotation=45)
plt.show()

# %% [markdown]
# Como n√£o houve a cria√ß√£o da rela√ß√£o entre itens e compras, a distribui√ß√£o se manteve constante ao longo do top10, tendo poucas varia√ß√µes.

# %% [markdown]
# ### Passo 4: Considera√ß√µes Finais (2 pontos)
# *Pontos positivos do DataFrame*
# - H√° a inser√ß√£o de sazonalidade nos dias do Natal e Black Friday
# - H√° uma rela√ß√£o direta entre `add_to_cart` e `purchase`, de modo a trazer coer√™ncia aos dados, j√° que n√£o h√° como realizar uma compra sem itens no carrinho
# - H√° a inser√ß√£o de valores nulos para representar usu√°rios n√£o logados
# - As distribui√ß√µes escolhidas foram escolhidas para se parecer com a distribui√ß√£o de dataframes reais
# 
# 
# *Limita√ß√µes do DataFrame*
# - N√£o modela varia√ß√µes de comportamento por dia da semana (ex.: finais de semana vs dias √∫teis).
# - Cada linha corresponde a um clique isolado, sem agrupar m√∫ltiplas p√°ginas numa mesma sess√£o.
# - A sazonalidade √© simplificada e n√£o leva em conta promo√ß√µes espec√≠ficas ou campanhas de marketing.
# - N√£o h√° sequ√™ncia l√≥gica de navega√ß√£o por produto ou recomenda√ß√µes; IDs s√£o independentes e aleat√≥rios.
# 


